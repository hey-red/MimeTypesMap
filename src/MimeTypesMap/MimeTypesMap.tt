﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<# var mimeTypes = GetMimeTypeList(); #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace HeyRed.Mime
{
    // WARNING: This class auto generated by T4. DON'T modify manually.
    public static class MimeTypesMap
    {
        private static readonly string _defaultExtension = "bin";
        private static readonly string _defaultMimeType = "application/octet-stream";

        // http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
        private static Lazy<Dictionary<string, string>> _mimeTypeMap = new Lazy<Dictionary<string, string>>(() => new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
<# foreach (var t in mimeTypes) { #>
            ["<#= t.Key #>"] = "<#= t.Value #>",
<# } #>
        });

        public static string GetExtension(string mime)
        {
            var ext = _mimeTypeMap.Value.FirstOrDefault(x => x.Value.Contains(mime)).Key;
            if (ext != null)
            {
                return ext;
            }
            return _defaultExtension;
        }

        public static IEnumerable<string> GetExtensions(string mime)
        {
            var ext = _mimeTypeMap.Value.Where(x => x.Value.Contains(mime)).Select(x => x.Key);
            if (ext != null)
            {
                return ext;
            }
            return new List<string> { "???" };
        }

        public static string GetMimeType(string fileName)
        {
            string ext = fileName;
            var ind = ext.LastIndexOf('.');
            if (ind != -1 && ext.Length > ind + 1)
            {
                ext = fileName.Substring(ind + 1).ToLower();
            }
            if (_mimeTypeMap.Value.TryGetValue(ext, out string result))
            {
                return result;
            }
            return _defaultMimeType;
        }

        public static void AddOrUpdate(string mime, string extension)
        {
            _mimeTypeMap.Value[extension] = mime;
        }
    }
}
<#+
private static Dictionary<string, string> GetMimeTypeList()
{
    using (var client = new WebClient())
    {
        var res = client.DownloadString(new Uri("http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types"));
        var tempDict = new Dictionary<string, string>();
        using (var reader = new StringReader(res))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                if (line.Trim().StartsWith("#")) continue;
                var parts = Regex.Split(line, @"\s+");
                if (parts.Length < 2) continue;
				for (int i = 1; i < parts.Length; i++)
				{
					if (tempDict.ContainsKey(parts[i])) continue;
					tempDict.Add(parts[i], parts[0]);
				}
            }
        }
        return tempDict;
    }
}
#>
